#!/bin/sh

# In the pom.xml, we've already explained what libraries we depend
# on. Maven downloaded them, and put them "somewhere" (our
# repository). Now we ask maven to build up the CLASSPATH that let us
# run against those libraries.

# In a shell script, $(some command), runs "some command" and returns
# its output as a string.  You can run
#  mvn dependency:build-classpath
# from the command-line to see how this works.

CP=$(mvn dependency:build-classpath | grep -v INFO)

# In addition to the libraries we depend on, to run our program, we
# have to add the jar file that contains our own code to the
# classpath.  We use $(ls target/*.jar) instead of
# target/boggle-1.0.jar so that this script can be reused in other
# projects more easily.

TARGET=$(ls target/*.jar)

# Again, we're trying to make the script more reusable by guessing the
# package name from the current directory, instead of hard coding.
# But this relies on some conventions in naming.  You'll have to call
# your class "Main" and use our recommended package structure.

PROJECT=$(basename $(pwd))

# The funny symbol: "$*" passes the command-line arguments on from
# this script to your Java program.

java -cp $TARGET:$CP edu.brown.cs.jbellavi.$PROJECT.Main "$*"
